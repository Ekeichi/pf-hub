#!/usr/bin/env python3
"""
Script de test pour predict_elev.py
"""

import sys
import os

# Ajouter le r√©pertoire parent au PYTHONPATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_predict_elev():
    """Test du module predict_elev"""
    try:
        # Importer le module
        from app.utils.predict_elev import elev_func_ml, process_activities_for_prediction
        
        print("‚úÖ Module predict_elev import√© avec succ√®s")
        
        # Test avec des donn√©es factices
        print("\nüß™ Test avec des donn√©es factices...")
        
        # Cr√©er des donn√©es de test
        import pandas as pd
        import numpy as np
        
        # Donn√©es factices pour tester
        test_data = {
            "elevation_data": {
                "distance": [0, 100, 200, 300, 400, 500],
                "altitude": [100, 105, 110, 108, 112, 115]
            },
            "pace_data": {
                "time": [0, 30, 60, 90, 120, 150],
                "distance": [0, 100, 200, 300, 400, 500]
            },
            "heartrate_data": {
                "time": [0, 30, 60, 90, 120, 150],
                "heartrate": [140, 145, 150, 148, 152, 155]
            }
        }
        
        # Cr√©er un DataFrame avec plusieurs activit√©s
        activities = [test_data for _ in range(5)]
        df = pd.DataFrame(activities)
        
        print(f"DataFrame cr√©√© avec {len(df)} activit√©s")
        
        # Tester la fonction principale
        vitesse_plat = 3.5  # m/s
        k1, k2, classifier = elev_func_ml(df, vitesse_plat)
        
        print(f"‚úÖ Test r√©ussi!")
        print(f"k1 (mont√©e): {k1}")
        print(f"k2 (descente): {k2}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("Assurez-vous que toutes les d√©pendances sont install√©es:")
        print("pip install pandas numpy scikit-learn matplotlib seaborn")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_with_real_data():
    """Test avec de vraies donn√©es de la base de donn√©es"""
    try:
        print("\nüóÑÔ∏è Test avec de vraies donn√©es de la base...")
        
        # Importer les modules n√©cessaires
        from app.repositories.strava_activity import get_activities_for_prediction
        from app.database import get_db
        from app.utils.predict_elev import elev_func_ml, process_activities_for_prediction
        
        # Cr√©er une session de base de donn√©es
        db = get_db()
        athlete_id = 32883472
        
        print(f"R√©cup√©ration des activit√©s pour l'athl√®te {athlete_id}...")
        activities = get_activities_for_prediction(db, athlete_id)
        print(f"R√©cup√©r√© {len(activities)} activit√©s")
        
        # Traiter les activit√©s
        df, valid_activities = process_activities_for_prediction(activities, db, athlete_id)
        
        if df is not None and len(df) > 0:
            print(f"‚úÖ {valid_activities} activit√©s valides trouv√©es")
            
            # Appliquer le mod√®le ML
            k1, k2, classifier = elev_func_ml(df, 3.5)
            
            print(f"‚úÖ Mod√®le ML entra√Æn√© avec succ√®s!")
            print(f"k1 (mont√©e): {k1}")
            print(f"k2 (descente): {k2}")
            
            return True
        else:
            print("‚ö†Ô∏è Aucune activit√© avec des donn√©es valides trouv√©e")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test avec de vraies donn√©es: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ Test du module predict_elev.py")
    print("=" * 50)
    
    # Test 1: Import et donn√©es factices
    success1 = test_predict_elev()
    
    # Test 2: Donn√©es r√©elles (optionnel)
    if success1:
        print("\n" + "=" * 50)
        success2 = test_with_real_data()
    
    print("\n" + "=" * 50)
    if success1:
        print("‚úÖ Tests termin√©s avec succ√®s!")
    else:
        print("‚ùå Tests √©chou√©s") 